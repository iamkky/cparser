#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdio.h>
#include <stdarg.h>

#include "common.h"

#include "Tree.h"
#include "Symbol.h"

#include "c_parser.h"
#include "c_parser.tokens.h"
#include "c_lex.h"

#ifdef DEBUGALL
#define DDEBUG 1
#define TOKENDEBUG 1
#define RETURNDEBUG 1
#endif

#define _ddebug_printf _ddprintf

static int _ddprintf(char *fmt, ...)
{
va_list ap;
int	r;

	va_start(ap, fmt);
	r = vfprintf(stderr, fmt, ap);
	va_end(ap);
	return r;
}
 
void static safe_free(void *ptr)
{
	if(ptr) free(ptr);
}

int default_action(xParser self, xParserType *result, xParserType *terms, int *types, int start, int end, int nt_id)
{
Tree t;
int  i;

	if(result->t==NULL){
		result->info.is_token = 0;
		result->info.id = nt_id;
		t = treeNew(memdup(&(result->info),sizeof(result->info)));
	}else{
		t = result->t;
	}

	if((result->t == NULL) || (result->t != NULL && start>0)){
		for(i=start; i<end; i++){
			if(types[i] < RDPP_NONTERMINAL_START){
				treeAddChild(t, treeNew(memdup(&(terms[i].info),sizeof(terms[i].info))));
			}else{
				treeAddChild(t, terms[i].t);
			}
		}
	}

	result->t = t;
}

static int typedefFlag = 0;

%%xParser top x_lex
struct {
	Tree	t;
	int	st_class;
	int	type;
	int	primitive_subtype;

	struct symbol_info {
		int	is_token;
		int	id;
		char	*str;
		char	*file;
		int	lnumber;
	} info;
}
%%

%%action { default_action(self, &result, terms, types, start, end, rdpp_nt_id); }

%%names

%%extra {
	struct cparser_extra {
        	SymbolTable     syms;
		int		struct_or_union_name_escope;
		int		level;
		char		*file;
		int		lnumber;

		int		current_symbol_index;
	}
}


#top: lextest ;
top: translation_unit ;

# 3.1.3 Constants
constant:
	FLOAT_CONST
	| INTEGER_CONST
	| CHARACTER_CONST
	| ENUMERATION_CONST
	;

# 3.1.3.3 Enumeration constants

enumeration_constant:
	IDENTIFIER
	;

# 3.3.1 Primary expressions
#          
#          primary-expression:
#                  identifier
#                  constant
#                  string-literal
#                  (  expression )
#
# Adaptation:
# 	Changed to support one more just-brilliant life-changing standard-breaking
# 	GCC feature that glibc will, for sure use, in the header files...
#

primary_expression:
	IDENTIFIER
	| constant
	| STRING
	| OP primary_expression_gcc_extension CP
	| BUILTIN_VA_ARG OP assignment_expression COMMA type_name CP
	;

primary_expression_gcc_extension:
	expression
	| compound_statement
	;

# 3.3.2 Postfix operators
#
#          postfix-expression:
#                  primary-expression
#                  postfix-expression [  expression ] 
#                  postfix-expression (  argument-expression-list<opt> ) 
#                  postfix-expression .   identifier
#                  postfix-expression ->  identifier
#                  postfix-expression ++ 
#                  postfix-expression --
#
#          argument-expression-list:
#                  assignment-expression
#                  argument-expression-list ,  assignment-expression
#

postfix_expression:
	primary_expression postfix_expression_lr
	;

postfix_expression_lr:
	  OB expression CB postfix_expression_lr
	| OP argument_expression_list_opt CP postfix_expression_lr
	| DOT IDENTIFIER postfix_expression_lr
	| ARROW IDENTIFIER postfix_expression_lr
	| DEC postfix_expression_lr
	| INC postfix_expression_lr
	|
	;

argument_expression_list_opt:
	argument_expression_list
	|
	;

argument_expression_list:
	assignment_expression [ COMMA assignment_expression ]
	;

# 3.3.3 Unary operators
#
#          unary-expression:
#                  postfix-expression
#                  ++  unary-expression
#                  --  unary-expression
#                  unary-operator cast-expression
#                  sizeof  unary-expression
#                  sizeof (  type-name )
#
#          unary-operator: one of
#                  &  *  +  -  ~  !
#

unary_expression:
	  postfix_expression
	| INC unary_expression
	| DEV unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression_sizeof_disambiguation
	;

unary_expression_sizeof_disambiguation:
	  OP unary_expression_sizeof_disambiguation_2
	| unary_expression
	;

unary_expression_sizeof_disambiguation_2:
	 type_name CP
	| expression CP postfix_expression_lr
	; 

unary_operator:
	  AMPERSAND
	| STAR
	| PLUS
	| MINUS
	| NEG
	| LOG_NOT
	;

# 3.3.4 Cast operators
#
#          cast-expression:
#                  unary-expression
#                  ( type-name )  cast-expression
#
#
# first(OP type_name CP cast_expression) includes '('
# first(unary_expression) also includes '('
#
# bacause:
#    first(unary_expression) = { first(postfix_expression), INC, DEC, unary_operator, SIZEOF }
#    first(postfix_expression) = first(primary_expression)
#    first(primary_expression) = { first(id), first(constant), first(STRING), '(' }
#
#    than:
#    first(unary_expression) = { first(id), first(constant), first(STRING), '(', INC, DEC, unary_operator, SIZEOF }
#
#cast_expression:
#	OP type_name CP cast_expression
#	| unary_expression
#	;
#

cast_expression:
	OP cast_expression_disambiguation
	| unary_expression
	;

cast_expression_disambiguation:
	type_name CP cast_expression
	| primary_expression_gcc_extension CP postfix_expression_lr
	;

# 3.3.5 Multiplicative operators
multiplicative_expression:
	cast_expression [ multiplicative_expression_operator cast_expression ]
	;

multiplicative_expression_operator:
	STAR
	| DIV
	| MODULE
	;

# 3.3.6 Additive operators
additive_expression:
	multiplicative_expression [ additive_expression_operator  multiplicative_expression ]
	;

additive_expression_operator:
	PLUS
	| MINUS
	;

# 3.3.7 Bitwise shift operators
shift_expression:
	additive_expression [ shift_expression_operator additive_expression ]
	;

shift_expression_operator:
	SHIFTLEFT
	| SHIFTRIGHT
	;

# 3.3.8 Relational operators
relational_expression:
	shift_expression [ relational_expression_operator shift_expression ]
	;

relational_expression_operator:
	CMP_LT
	| CMP_GT
	| CMP_LE
	| CMP_GE
	;

# 3.3.9 Equality operators
equality_expression:
	relational_expression [ equality_expression_operator relational_expression ]
	;

equality_expression_operator:
	CMP_EQ
	| CMP_NE
	;

# 3.3.10 Bitwise and operator
and_expression:
	equality_expression [ AMPERSAND equality_expression ]
	;

# 3.3.11 Bitwise exclusive or operator
exclusive_or_expression:
	and_expression [ BIT_EOR and_expression ]
	;

# 3.3.12 Bitwise inclusive or operator
inclusive_or_expression:
	exclusive_or_expression [ BIT_OR exclusive_or_expression ]
	;

# 3.3.13 Logical and operator
logical_and_expression:
	inclusive_or_expression [ LOG_AND inclusive_or_expression ]
	;

# 3.3.14 Logical or operator
logical_or_expression:
	logical_and_expression [ LOG_OR logical_and_expression ]
	;

# 3.3.15 Conditional operator
conditional_expression:
	logical_or_expression conditional_expression_disambiguation
	;

conditional_expression_disambiguation:
	TERNARY expression COLON conditional_expression
	|
	;

# 3.3.16 Assignment operators

# assignment_expression:
#	unary_expression assignment_operator assignment_expression
#	| conditional_expression
#	;
#
#	assignment-operator: one of   (for later)
#	=  *=  /=  %=  +=  -=  <<=  >>=  &=  ^=  |=   (for later)
#
#	condition_expression can reduce to an unary_expression
#	this ruleset has two rules that start with same TERMINAL.
#	A solution is to change unary_expression to condition_expression 
#	and use a disambiguation technic, and let correctness check for
#	semantic.
#
#	So the ruleset changes to:
#	conditional_expression assignment_operator assignment_expression
#	| conditional_expression
#	;

assignment_expression:
	conditional_expression [ assignment_operator conditional_expression ]
	;

assignment_expression_disambiguation:
	assignment_operator assignment_expression
	|
	;

assignment_operator:
	  ASSIGN
	| ASSIGN_MUL
	| ASSIGN_DIV
	| ASSIGN_MOD
	| ASSIGN_ADD
	| ASSIGN_SUB
	| ASSIGN_SHFL
	| ASSIGN_SHFR
	| ASSIGN_AND
	| ASSIGN_NEG
	| ASSIGN_OR
	;

# 3.3.17 Comma operator
#
#          expression:
#                  assignment-expression
#                  expression ,  assignment-expression
	
expression_opt:
	expression
	|
	;

expression:
	assignment_expression [ COMMA assignment_expression ]
	;

#3.4 CONSTANT EXPRESSIONS *****

constant_expression_opt:
	constant_expression
	|
	;

constant_expression:
	conditional_expression
	;

# 3.5 DECLARATIONS
#
#          declaration:
#                  declaration-specifiers init-declarator-list<opt> ;
#
#          declaration-specifiers:
#                  storage-class-specifier declaration-specifiers<opt>
#                  type-specifier declaration-specifiers<opt>
#                  type-qualifier declaration-specifiers<opt>
#
#          init-declarator-list:
#                  init-declarator
#                  init-declarator-list ,  init-declarator 
#
#          init-declarator:
#                  declarator
#                  declarator =  initializer
#

# Adaptations:
#
#   function definition is parsed as a declaration followed by a compound statement
#   semantics will be required to decide if it's just a declaration or a definition.
#
#   Note: this grammar requires at least one "declaration_specifier" for functions
#   Which diverge from c89, that accepts unspecified functions.
#
#          function-definition:
#                  declaration-specifiers<opt> declarator declaration-list<opt> compound-statement
#
#   Included simples-asm-expr from GNU to support glibc header files

declaration:
	{
		typedefFlag = 0;
	}
	declaration_specifiers
		{ if(terms[0].st_class==SYMBOL_TYPEDEFNAME) typedefFlag = 1; else typedefFlag = 0; }
	   init_declarator_list_opt function_definition_or_declaration_complement
			{ fprintf(stdout," PRIMITIVE %d ", terms[0].primitive_subtype);
			  fprintf(stdout," END OF DECLARATION\n"); }
	;

function_definition_or_declaration_complement:
	compound_statement
	| SEMICOLON
	;

declaration_specifiers:
	declaration_specifier
			{ result.st_class = terms[0].st_class;
			  result.primitive_subtype = terms[0].primitive_subtype; }
	  [ declaration_specifier
			{ result.st_class |= terms[1].st_class;
			  result.primitive_subtype = terms[0].primitive_subtype; }
	  ]
	;

declaration_specifier:
	storage_class_specifier { result.st_class = terms[0].st_class; }
	| type_specifier { result.st_class = terms[0].st_class; }
	| type_qualifier { result.st_class = terms[0].st_class; result.primitive_subtype = terms[0].primitive_subtype; }
	| function_specifier { result.st_class = terms[0].st_class; }   # c99 inline
	;

function_specifier: # C99 inline
	INLINE
	;

init_declarator_list_opt:
	init_declarator_list
	|
	;

init_declarator_list:
	init_declarator [ COMMA init_declarator ]
	;

init_declarator:
	declarator simple_asm_expr init_declarator_assignment
	;

init_declarator_assignment:
	ASSIGN initializer
	|
	;

simple_asm_expr:
	ASM OP string_literal CP
	|
	;

string_literal:
	STRING [ STRING ]
	;

#3.5.1 Storage-class specifiers

storage_class_specifier:
	  TYPEDEF { result.st_class = SYMBOL_TYPEDEFNAME; }
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

#3.5.2 Type specifiers

type_specifier:
	  VOID
	| CHAR     { result.primitive_subtype = PSTYPE_CHAR; } 
	| SHORT
	| INT      { result.primitive_subtype = PSTYPE_INT; } 
	| LONG
	| FLOAT    { result.primitive_subtype = PSTYPE_FLOAT; } 
	| DOUBLE
	| SIGNED
	| UNSIGNED
	| { self->extra->struct_or_union_name_escope = 1; } struct_or_union_specifier
	| { self->extra->struct_or_union_name_escope = 0; } enum_specifier
	| TYPEDEF_NAME
	;	

# 3.5.2.1 Structure and union specifiers

##struct_or_union_specifier:
##	struct_or_union identifier<opt> { struct_declaration_list } 
##	| struct_or_union identifier
##	;

struct_or_union_specifier:
	struct_or_union	struct_or_union_specifier_disambiguation
	;

struct_or_union_specifier_disambiguation:
	IDENTIFIER { self->extra->struct_or_union_name_escope = 0; } struct_or_union_specifier_disambiguation2 
	| { self->extra->struct_or_union_name_escope = 0; } OBLOCK struct_declaration_list CBLOCK
	;

struct_or_union_specifier_disambiguation2:
	OBLOCK struct_declaration_list CBLOCK
	|
	;

struct_or_union:
	  STRUCT
	| UNION
	;

##struct_declaration_list:
##	struct_declaration
##	| struct_declaration_list struct_declaration
##	;

struct_declaration_list:
	struct_declaration [ struct_declaration ]
	;

#  struct_declarator_list_opt introduced to be
#  compatible with C1X unamed structure/union member
#

struct_declaration:
	specifier_qualifier_list struct_declarator_list_opt SEMICOLON
	;

specifier_qualifier_list_opt:
	specifier_qualifier_list
	|
	;

specifier_qualifier:
	  type_specifier
	| type_qualifier
	;

specifier_qualifier_list:
	specifier_qualifier [ specifier_qualifier ]
	;

struct_declarator_list_opt:
	struct_declarator_list
	|
	;

##struct_declarator_list:
##	struct_declarator
##	| struct_declarator_list COMMA  struct_declarator
##	;

struct_declarator_list:
	struct_declarator [ COMMA struct_declarator ]
	;

##struct_declarator:
##	declarator
##	| declarator<opt> :  constant_expression
##	;

struct_declarator:
	declarator struct_declarator_disambiguation
	| COLON constant_expression
	;

struct_declarator_disambiguation:
	COLON  constant_expression
	|
	;

# 3.5.2.2 Enumeration specifiers

#enum_specifier:
#	ENUM identifier<opt> OBLOCK enumerator_list CBLOCK
#	| ENUM identifier
#	;

enum_specifier:
	ENUM enum_specifier_disambiguation
	;

enum_specifier_disambiguation:
	IDENTIFIER enum_specifier_disambiguation2
	| enumerator_list
	;

enum_specifier_disambiguation2:
	enumerator_list
	|
	;

#enumerator_list:
#	enumerator
#	| enumerator_list COMMA enumerator
#	;

enumerator_list:
	OBLOCK enumerator enumerator_list_disambiguation
	;

enumerator_list_disambiguation:
	CBLOCK
	| COMMA enumerator_list_disambiguation2
	;

enumerator_list_disambiguation2:
	CBLOCK
	| enumerator enumerator_list_disambiguation
	;

#enumerator:
#	enumeration_constant
#	| enumeration_constant ASSIGN constant_expression
#	;

enumerator:
	enumeration_constant enumerator_disambiguation
	;

enumerator_disambiguation:
	ASSIGN constant_expression
	|
	;


# 3.5.3 Type qualifiers
#
type_qualifier:
	CONST
	| RESTRICT		# C99 
	| VOLATILE
	;
				  

# 3.5.4 Declarators
#
#          declarator:
#                  pointer<opt> direct-declarator
#
#          direct-declarator:
#                  identifier
#                  (  declarator ) 
#                  direct-declarator [  constant-expression<opt> ] 
#                  direct-declarator (  parameter-type-list ) 
#                  direct-declarator (  identifier-list<opt> )
#
#          pointer:
#                  *  type-qualifier-list<opt>
#                  *  type-qualifier-list<opt> pointer
#
#          type-qualifier-list:
#                  type-qualifier
#                  type-qualifier-list type-qualifier
#
#          parameter-type-list:
#                  parameter-list
#                  parameter-list , ...
#
#          parameter-list:
#                  parameter-declaration
#                  parameter-list ,  parameter-declaration
#
#          parameter-declaration:
#                  declaration-specifiers declarator
#                  declaration-specifiers abstract-declarator<opt>
#
#          identifier-list:
#                  identifier
#                  identifier-list ,  identifier
#
# 3.5.5 Type names
#
#          type-name:
#                  specifier-qualifier-list abstract-declarator<opt>
#
#          abstract-declarator:
#                  pointer
#                  pointer<opt> direct-abstract-declarator
#
#          direct-abstract-declarator:
#                  (  abstract-declarator ) 
#                  direct-abstract-declarator<opt> [  constant-expression<opt> ] 
#                  direct-abstract-declarator<opt> (  parameter-type-list<opt> )
#

#
# Adaptations:
#   Changed "parameter-type-list" to "parameter-type-list<opt>"
#   because it must accept and empty list
#
#   Removed: direct-declarator (  identifier-list<opt> )
#   I Suppose this production is in place to support K&R style - will not support by now
#
#   pointer:
#           *  type-qualifier-list<opt>
#           *  type-qualifier-list<opt> pointer
#
#   changed to:
#
#   pointer:
#           *  type-qualifier-list<opt> pointer<opt>
#
#   Changed how ELLIPSIS is accepted
#
#   Removed: identifier-list
#   I suppose it's for K&R, not supporting K&R
#
#   Had to merge direct_declarator with abstract_directe_declarator
#   because has no way to know which one is the case 

declarator:
	pointer_opt direct_or_abstract_declarator
		{ if(terms[0].type == TYPE_POINTER) fprintf(stdout, "POINTER TO "); }
	;

direct_or_abstract_declarator:
	IDENTIFIER 			
		{ 
			if(typedefFlag){
				self->extra->current_symbol_index = 
				symbolTableRegister((self->extra)->syms, terms[0].info.str, 1, self->extra->level);
				typedefFlag = 0;
			}else{
				self->extra->current_symbol_index = 
				symbolTableRegister((self->extra)->syms, terms[0].info.str, 2, self->extra->level);
			}

			{ fprintf(stdout, "IDENTIFIER %s ", terms[0].info.str); }
		}
		[ direct_declarator_postfix_options ]
	| OP parameter_type_list_or_declarator CP [ direct_declarator_postfix_options ]
	| OB constant_expression_opt CB [ direct_declarator_postfix_options ]
	|
	;

parameter_type_list_or_declarator:
	  parameter_type_list
	| declarator
	|
	;

direct_declarator_postfix_options:
	  OB constant_expression_opt CB 
		{ fprintf(stdout, "ARRAY OF "); }
	| OP parameter_type_list_opt CP
	;

pointer_opt:	
	pointer { result.type = TYPE_POINTER; }
	|
	;

pointer:
	STAR type_qualifier_list_opt pointer_opt
	;

type_qualifier_list_opt:
	type_qualifier_list
	|
	;

type_qualifier_list:
	type_qualifier [ type_qualifier ]
	;

parameter_type_list_opt:
	parameter_type_list
	|
	;

# Will not accept ELLIPSIS here
parameter_type_list:
	parameter_list 
	;

parameter_list:
	parameter_declaration [ COMMA parameter_declaration ]
	;

parameter_declaration:
	declaration_specifiers parameter_declaration_disambiguation
	# Accepting ELLIPSIS here by now
	| ELLIPSIS
	;

parameter_declaration_disambiguation:
	declarator			# declarator covers direct and abstract
	#| abstract_declarator_opt
	;

type_name:
	#specifier_qualifier_list abstract_declarator_opt
	specifier_qualifier_list declarator
	;

declarator_opt:
	declarator
	|
	;


# 3.5.7 Initialization
#
#          initializer:
#                  assignment-expression
#                  {  initializer-list } 
#                  {  initializer-list , }
#
#          initializer-list:
#                  initializer
#                  initializer-list ,  initializer
#

initializer:
	assignment_expression
	| initializer_list
	;

initializer_list:
	OBLOCK initializer initializer_list_disambiguation
	;

initializer_list_disambiguation:
	CBLOCK
	| COMMA initializer_list_disambiguation2
	;

initializer_list_disambiguation2:
	CBLOCK
	| initializer initializer_list_disambiguation
	;


# 3.6 STATEMENTS
#           statement:
#                   labeled-statement
#                   compound-statement
#                   expression-statement
#                   selection-statement
#                   iteration-statement
#                   jump-statement


statement:
	labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

# 3.6.1 Labeled statements
#
#          labeled-statement:
#                  identifier :  statement
#                  case  constant-expression :  statement
#                  default :  statement
#
#
# Adaptations:
#   rules starting with IDENTIFIER conflicts with statement.
#   parser needs to look ahead second token to disambiguate between labeled-statement
#   and expression
#
#   rdppgen does not perform look ahead, neither backtracking
#   A different solution need to be done...
#
#   And in the end of the day the diferent solution become something
#   like a poor man handmade single character lookahead :-)
#
#   but, it works...
#

labeled_statement:
	{ 
		int c;

		// if current token is not an IDENTIFIER go to next production rule
		if(!checkToken(self, IDENTIFIER)) break;

		// If it is, go find next no-blank (' ','\t') character.
		c = self->cursor;
		while(*(self->buffer+c) == ' ' || *(self->buffer+c) == '\t') c++;

		// If there is no COMMA after IDENTIFIER, break to next production
		if(*(self->buffer+c) != ':') break;

		// If there is a COMMA, follow with this production rule
	}
	  IDENTIFIER COLON statement
	| CASE constant_expression COLON statement
	| DEFAULT COLON statement
	;

# 3.6.2 Compound statement, or block
#
#          compound_statement:
#                  OBLOCK declaration_list<opt> statement_list<opt> CBLOCK
#                  ;
#
#          declaration_list:
#                  declaration
#                  | declaration-list declaration
#                  ;
#
#          statement_list:
#                  statement
#                  | statement-list statement
#                  ;
#
# Adaptations:
#   As both declaration_list<opt> statement_list<opt> are only used here
#   We can safely remove <opt> flags and at empty for ruleset os both 
#   these nonterminals

compound_statement:
	OBLOCK { self->extra->level++; } declaration_list statement_list { self->extra->level--; } CBLOCK
	;

declaration_list:
	declaration [ declaration ]
	|
	;

statement_list:
	statement [ statement ]
	|
	;

# 3.6.3 Expression and null statements
#
#          expression-statement:
#                  expression<opt> ;
#

expression_statement:
	expression SEMICOLON
	| SEMICOLON
	;

# 3.6.4 Selection statements

#selection_statement:
#	IF OP expression CP  statement
#	| IF OP expression CP  statement ELSE  statement
#	| SWITCH OP  expression CP  statement
#	;

selection_statement:
	IF OP expression CP statement selection_statement_disambiguation
	| SWITCH OP expression CP statement
	;

selection_statement_disambiguation:
	ELSE statement
	|
	;

# 3.6.5 Iteration statements

iteration_statement:
	WHILE OP  expression CP  statement
	| DO  statement WHILE OP  expression CP SEMICOLON
	| FOR OP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt CP statement
	;

# 3.6.6 Jump statements

jump_statement:
	GOTO IDENTIFIER SEMICOLON
	| CONTINUE SEMICOLON
	| BREAK SEMICOLON
	| RETURN return_value SEMICOLON
	;

# Added for disambiguation
# 
return_value:
	expression
	| 
	;

# 3.7 EXTERNAL DEFINITIONS

##translation_unit:
##	external_declaration
##	| translation_unit external_declaration
##	;

translation_unit:
#	external_declaration
	external_declaration [ external_declaration ]
	|
	;

# Gonna check semantics of function definitions after parser
# To simplify the parser will accept any sequence of declarartions
# or compound_statement.
# A compound_statement that follows a functions declaration will
# be accepted as a function definition
# Otherwise a compound-statement no following a functions declaration
# will be rejected as an error.
#
#external_declaration:
#	function_definition   (for later)
#	| declaration
#	;

external_declaration:
	declaration
	;

# 3.7.1 Function definitions

#function-definition:
#	declaration-specifiers<opt> declarator
#	declaration-list<opt> compound-statement

