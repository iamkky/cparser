#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include "Symbol.h"
#include "Tree.h"

#include "common.h"

#include "c_parser.h"
#include "c_parser.tokens.h"
#include "c_lex.h"

#define TOKENDEBUG 1

struct keyword {
	char	*name;
	int	token;
};

static struct keyword keywords[] = {
	{"auto",	AUTO},
	{"double",	DOUBLE},
	{"int",		INT},
	{"struct",	STRUCT},
	{"break",	BREAK},
	{"else",	ELSE},
	{"long",	LONG},
	{"switch",	SWITCH},
	{"case",	CASE},
	{"enum",	ENUM},
	{"register",	REGISTER},
	{"typedef",	TYPEDEF},
	{"char",	CHAR},
	{"extern",	EXTERN},
	{"return",	RETURN},
	{"union",	UNION},
	{"const",	CONST},
	{"float",	FLOAT},
	{"short",	SHORT},
	{"unsigned",	UNSIGNED},
	{"continue",	CONTINUE},
	{"for",		FOR},
	{"signed",	SIGNED},
	{"void",	VOID},
	{"default",	DEFAULT},
	{"goto",	GOTO},
	{"sizeof",	SIZEOF},
	{"volatile",	VOLATILE},
	{"do",		DO},
	{"if",		IF},
	{"static",	STATIC},
	{"while",	WHILE},
	{"asm",		ASM},		// GNU asm()
	{"__asm",	ASM},		// GNU asm()
	{"__asm__",	ASM},		// GNU asm()
	{"inline",	INLINE},	// C99 inline
	{"__inline",	INLINE},	// GNU inline
	{"__inline__",	INLINE},	// GNU inline
	{"restrict",	RESTRICT},	// C99 restrict
	{"__restrict",	RESTRICT},	// GNU restrict
	{"__restrict__",RESTRICT},	// GNU restrict
	{NULL,		0}
};


// Lex Helper function
static char *nrDupToken(char *input, int size);

char static *getString(char *input, int *cursor, char escape, char closure)
{
char *tmp, *newtmp, *p, ch;
int  size, used, count, escaped;

	if((p = tmp = malloc(size = 128))==NULL) return NULL;
	*p = used = count = 0;

	if(*input++!=closure) return tmp;

	escaped = 0;
	while((ch = (*p++ = *input++))){
		count++;
		if(escaped){
			escaped = 0;
		}else if(ch == escape){
			escaped = 1;
		}else if(ch == closure){
			*(p-1)=0;
			break;
		}
		if(++used>=size-1) {
			if((newtmp = realloc(tmp, size = (2 * size)))==NULL) {
				free(tmp);
				return NULL;
			}
			p = (tmp = newtmp) + count;
		}
	}

	(*cursor)+=count;
	return tmp;
}

int static isDigit(int ch)
{
	return ch>='0' && ch<='9';
}

int static processLineMarker(xParserType *value, char *input, int *cursor, void *extra)
{
xParserExtraDataType	*e;
char			*p, *file, *f;
int			number = 0, c = 0;

	p = input;
	input += 2;	// skip "# " 

	// Get a integer number (line number)
	while(*input==' ' || *input=='\t') input++;
	while(isDigit(*input))
		number = 10 * number + (*input++) - '0';

	// Get a string (file name)
	while(*input==' ' || *input=='\t') input++;
	if(*input=='"'){
		f = ++input;
		while(*input!=0 && *input!='"' && *input!='\n') { c++; input++; }
		file = nrDupToken(f, c);
	}

	// ignore the rest (flags)
	while(*input!=0 && *input!='\n') input++;
	(*cursor)+=(input - p);

	//fprintf(stderr,"#LINE %d %s\n", number, file);

	e = (xParserExtraDataType *)extra;

	e->lnumber = number;
	e->file = file;

	return 0;
}

int static processHashLines(xParserType *value, char *input, int *cursor, void *extra)
{
char	*str, *tmp;
int	count;
int	lineno;

	count = 0;
	str = input;	

	if(*(input+1)==' ' && isDigit(*(input+2))){
		return processLineMarker(value, input, cursor, extra);
	}

	while(*str!=0 && *str!='\n'){
		str++;
		count++;
	}

	tmp = nrDupToken(input, count);
	fprintf(stderr,"Hashline unprocessed: %s\n", tmp);
	free(tmp);
	
	(*cursor)+=count;
	return 0;
}

int static processIdentifier(xParserType *value, void *extra)
{
struct keyword *k;
char	*str;
int	isTypedef;

	str = value->info.str;

	for(k = keywords; k->name; k++){
		if(strcmp(str, k->name)==0){
			return k->token;
		}
	}
	
	if(((xParserExtraDataType *)extra)->struct_or_union_name_escope == 0){
		if(isTypedef = symbolTableGetType(((xParserExtraDataType *)extra)->syms, str)){
//			fprintf(stderr,"Typedef detected: %s\n", str);
			return TYPEDEF_NAME;
		}
	}

//	fprintf(stderr,"Identifier detected: %s\n", str);
	return IDENTIFIER;
}

int static mk_token(xParserType *value, char *str, int id, void *extra)
{
xParserExtraDataType	*e = (xParserExtraDataType *)extra;

	value->info.is_token = 1;
	value->info.id = id;
	value->info.str = str;
	value->info.file = e->file;
	value->info.lnumber = e->lnumber;
}

// Old approch for keyword, mistaken "inta;" by "int a;"
//auto			: value->str = nrDupToken(input,size); return AUTO;
//double		: value->str = nrDupToken(input,size); return DOUBLE;
//int			: value->str = nrDupToken(input,size); return INT;
//struct		: value->str = nrDupToken(input,size); return STRUCT;
//...

%%x_lex xParserType

%define i	A-Za-z_
%define I	0-9A-Za-z_

%define D	0-9
%define N	1-9
%define O	0-7
%define H	0-9A-Fa-f
%define	S	+\-
%define E	eE
%define F	flFL
%define L	uUlL

\D\D*\.\D*\E\S\D\D*\F	: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\D\D*\.\D*\E\S\D\D*	: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\.\D*\E\S\D\D*\F	: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\.\D*\E\S\D\D*		: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\D\D*\.\D\F		: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\D\D*\.\D		: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\.\D\D*\F		: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\.\D\D*			: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\.\D\D*\F		: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;

\D\D*f			: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;
\D\D*F			: mk_token(value, nrDupToken(input,size), FLOAT_CONST, extra); return FLOAT_CONST;

0x\H\H*\L		: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0x\H\H*			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0X\H\H*\L		: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0X\H\H*			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0\O\O*\L		: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0\O\O*			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
\N\D*\L			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
\N\D*			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;
0			: mk_token(value, nrDupToken(input,size), INTEGER_CONST, extra); return INTEGER_CONST;


'			: mk_token(value, getString(input, cursor, '\\', '\''), CHARACTER_CONST, extra); return CHARACTER_CONST;
L'			: mk_token(value, getString(input, cursor, '\\', '\''), CHARACTER_CONST, extra); return CHARACTER_CONST;

"			: mk_token(value, getString(input, cursor, '\\', '\"'), STRING, extra); return STRING;
L"			: mk_token(value, getString(input, cursor, '\\', '\"'), STRING, extra); return STRING;

\i\I*			: mk_token(value, nrDupToken(input,size), IDENTIFIER, extra); return (value->info.id = processIdentifier(value, extra));

[			: mk_token(value, nrDupToken(input,size), OB, extra); return OB;
]			: mk_token(value, nrDupToken(input,size), CB, extra); return CB;
(			: mk_token(value, nrDupToken(input,size), OP, extra); return OP;
)			: mk_token(value, nrDupToken(input,size), CP, extra); return CP;
*=			: mk_token(value, nrDupToken(input,size), ASSIGN_MUL, extra); return ASSIGN_MUL;
/=			: mk_token(value, nrDupToken(input,size), ASSIGN_DIV, extra); return ASSIGN_DIV;
%=			: mk_token(value, nrDupToken(input,size), ASSIGN_MOD, extra); return ASSIGN_MOD;
+=			: mk_token(value, nrDupToken(input,size), ASSIGN_ADD, extra); return ASSIGN_ADD;
-=			: mk_token(value, nrDupToken(input,size), ASSIGN_SUB, extra); return ASSIGN_SUB;
<<=			: mk_token(value, nrDupToken(input,size), ASSIGN_SHFL, extra); return ASSIGN_SHFL;
>>=			: mk_token(value, nrDupToken(input,size), ASSIGN_SHFR, extra); return ASSIGN_SHFR;
&=			: mk_token(value, nrDupToken(input,size), ASSIGN_AND, extra); return ASSIGN_AND;
^=			: mk_token(value, nrDupToken(input,size), ASSIGN_NEG, extra); return ASSIGN_NEG;
|=			: mk_token(value, nrDupToken(input,size), ASSIGN_OR, extra); return ASSIGN_OR;

<<			: mk_token(value, nrDupToken(input,size), SHIFTLEFT, extra); return SHIFTLEFT;
>>			: mk_token(value, nrDupToken(input,size), SHIFTRIGHT, extra); return SHIFTRIGHT;
<=			: mk_token(value, nrDupToken(input,size), CMP_LE, extra); return CMP_LE;
>=			: mk_token(value, nrDupToken(input,size), CMP_GE, extra); return CMP_GE;
==			: mk_token(value, nrDupToken(input,size), CMP_EQ, extra); return CMP_EQ;
!=			: mk_token(value, nrDupToken(input,size), CMP_NE, extra); return CMP_NE;
<			: mk_token(value, nrDupToken(input,size), CMP_LT, extra); return CMP_LT;
>			: mk_token(value, nrDupToken(input,size), CMP_GT, extra); return CMP_GT;

->			: mk_token(value, nrDupToken(input,size), ARROW, extra); return ARROW;
++			: mk_token(value, nrDupToken(input,size), INC, extra); return INC;
--			: mk_token(value, nrDupToken(input,size), DEC, extra); return DEC;
&&			: mk_token(value, nrDupToken(input,size), LOG_AND, extra); return LOG_AND;
||			: mk_token(value, nrDupToken(input,size), LOG_OR, extra); return LOG_OR;
*			: mk_token(value, nrDupToken(input,size), STAR, extra); return STAR;
+			: mk_token(value, nrDupToken(input,size), PLUS, extra); return PLUS;
-			: mk_token(value, nrDupToken(input,size), MINUS, extra); return MINUS;
~			: mk_token(value, nrDupToken(input,size), NEG, extra); return NEG;
!			: mk_token(value, nrDupToken(input,size), LOG_NOT, extra); return LOG_NOT;
/			: mk_token(value, nrDupToken(input,size), DIV, extra); return DIV;
%			: mk_token(value, nrDupToken(input,size), MODULE, extra); return MODULE;
^			: mk_token(value, nrDupToken(input,size), BIT_EOR, extra); return BIT_EOR;
&			: mk_token(value, nrDupToken(input,size), AMPERSAND, extra); return AMPERSAND;
|			: mk_token(value, nrDupToken(input,size), BIT_OR, extra); return BIT_OR;
?			: mk_token(value, nrDupToken(input,size), TERNARY, extra); return TERNARY;
\:			: mk_token(value, nrDupToken(input,size), COLON, extra); return COLON;
=			: mk_token(value, nrDupToken(input,size), ASSIGN, extra); return ASSIGN;
,			: mk_token(value, nrDupToken(input,size), COMMA, extra); return COMMA;

{			: mk_token(value, nrDupToken(input,size), OBLOCK, extra); return OBLOCK;
}			: mk_token(value, nrDupToken(input,size), CBLOCK, extra); return CBLOCK;
;			: mk_token(value, nrDupToken(input,size), SEMICOLON, extra); return SEMICOLON;
\.\.\.			: mk_token(value, nrDupToken(input,size), ELLIPSIS, extra); return ELLIPSIS;
\.			: mk_token(value, nrDupToken(input,size), DOT, extra); return DOT;

\s			: 
\n			: ((xParserExtraDataType *)extra)->lnumber += 1;
\t			: 
\r			: 

#			: processHashLines(value, input, cursor, extra);

